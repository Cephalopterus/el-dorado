# We want to validate lint fixes on modified files
name: Build
# This workflow is triggered on pull request related events.
on:
  pull_request:
    ## Run if PR is
    #
    # - updated by pushing code, changing base branch, another PR merged into this branch
    # - opened newly
    # - updated with changes from target / base branch
    # - reopened
    #
    ##
    types: [opened, edited, synchronize, reopened]

jobs:
  build:
    # Job name is ESLint
    name: ESLint & TSC
    # dynamically select the OS from matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          # let's stick to a Ubuntu LTS image
          - ubuntu-18.04
        node-version:
          # latest stable node
          - 14.x
    services:
      postgres:
        image: postgres:12.3
        env:
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: passW0rd
          POSTGRES_DB: test
          DB_PORT: 27899
        ports:
          - 27899:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      # use Github's template action for checkout
      - name: git checkout
        uses: actions/checkout@v2
        with:
          # since we compare diff between 2 branches
          # it is best to have full depth
          fetch-depth: 0
      - name: setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v1.4.1
        with:
          node-version: ${{ matrix.node-version }}
      - name: yarn install
        # this is close to npm ci
        # when running in a CI, we can disable lot of interactive functionalities of Yarn
        # to focus only on the job of installing and setting up node_modules
        run: yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false
      - name: tsc
        # validate type definitions are correct
        # by running TypeScript checks
        run: yarn build
      - name: lint diff with ${{ github.event.pull_request.base.label }}
        # anyone looking at this step should be able to easily find out
        # that build is running against the right base / target branch
        # hence we print the name of the target branch
        # since computing git diff across forks is not well supported
        # it is better to query GitHub API to get list of files in PR
        # if private repo, GITHUB_TOKEN env variable should be added
        run: curl -s -X GET -G "https://api.github.com/repos/${{ github.event.pull_request.base.repo.full_name }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[] | select( .status != "deleted" ) | select(.filename|test(".[jt]sx?$")) | .filename' | xargs yarn eslint --quiet
      - name: verify postgres
        # we verify that postgres DB is up and running
        # and can be accessed from outside the docker container with right credentials
        run: PGPASSWORD=passW0rd psql -h localhost -p 27899 -d test -U demo -c "SELECT now();"
      - name: creating env for CI postgres access
        # copy the file to .env
        # this would allow the app under testing to get DB credentials from environment
        run: \cp .env.ci.sample .env
      - name: test api endpoints
        # finally, run the test suite
        run: yarn test
